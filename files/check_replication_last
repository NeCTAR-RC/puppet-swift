#!/usr/bin/env python
# Copyright (c) 2017, Monash e-Research Centre
#  (Monash University, Australia)
#  All rights reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
import argparse
import sys
import json
import requests
from time import time

STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3
SWIFT_PORT = {'object': 6000,
              'container': 6001,
              'account': 6002
              }

parser = argparse.ArgumentParser(description='Which swift entity\
                            to query: accounts, containers or objects')
parser.add_argument('-e', '--entity',
                    choices=['account', 'container', 'object'],
                    required=True, dest="entity",
                    help='result in replication time\
                    for swift storage entities,\
                    default is object')
parser.add_argument('-w', '--warning', required=True, dest="warning",
                    help='threshold value for WARNING state', type=int)
parser.add_argument('-c', '--critical', required=True, dest="critical",
                    help='threshold value for CRITICAL state', type=int)
args = parser.parse_args()
entity = args.entity
try:
    report = requests.get("http://localhost:%s/recon/replication/%s"
                          % (SWIFT_PORT[entity], entity))
    report.raise_for_status()
except requests.exceptions.HTTPError:
    state = STATE_UNKNOWN
    sys.exit(state)

try:
    stats = json.loads(report.text)
    replication_last = float(stats['replication_last'])
    delta_time = float(time()) - replication_last
except ValueError:
    raise
    state = STATE_UNKNOWN
    sys.exit(state)

state = STATE_OK
msgs = []
if  delta_time > args.warning and delta_time < args.critical:
    msgs.append("WARNING : it has been %s sec since last %s replication"
                % (delta_time, entity))
    state = max(state, STATE_WARNING)

elif delta_time > args.critical:
    msgs.append("CRITICAL: it has been %s sec since last %s replication"
                % (delta_time, entity))
    state = max(state, STATE_CRITICAL)
else:
    msgs.append("OK : it has been %s sec since last %s replication"
                % (delta_time, entity))
    pass

print ", ".join(msgs)
sys.exit(state)
