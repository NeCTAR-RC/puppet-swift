#!/usr/bin/env python
# Copyright (c) 2017, Monash e-Research Centre
#  (Monash University, Australia)
#  All rights reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
import argparse
import sys
import json
import subprocess

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3


parser = argparse.ArgumentParser(description='Check replication time of swift accounts, containers, objects')
parser.add_argument('-e', '--entity', choices=['account','container','object'], required=True, dest="entity",
                   help='result in replication time for swift storage entities, default is object')
parser.add_argument('-w', '--warning', required=True, dest="warning",
                   help='threshold value for WARNING state', type=int)
parser.add_argument('-c', '--critical', required=True, dest="critical",
                   help='threshold value for CRITICAL state', type=int)
args = parser.parse_args()
entity = args.entity
try:
    report = subprocess.check_output(["curl", "-s", "http://localhost:6001/recon/replication/%s" % entity])
    stats = json.loads(report)
    replication_time = float(stats['replication_time'])
except subprocess.CalledProcessError:
    state = STATE_UNKNOWN
    sys.exit(state)


state = STATE_OK
msgs = []
if replication_time > args.warning and replication_time < args.critical:
    msgs.append("WARNING : %s replication time is %s" % (entity,replication_time))
    state = max(state, STATE_WARNING)

elif replication_time > args.critical:
    msgs.append("CRITICAL: %s replication time is %s" % (entity,replication_time))
    state = max(state, STATE_CRITICAL)
else:
    msgs.append("OK : %s replication time is %s" % (entity,replication_time))
    pass

print ", ".join(msgs)
sys.exit(state)
